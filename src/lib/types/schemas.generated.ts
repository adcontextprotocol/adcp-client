// Generated Zod v4 schemas from TypeScript types
// Generated at: 2025-10-24T15:02:04.582Z
// Sources:
//   - core.generated.ts (core types)
//   - tools.generated.ts (tool types)
//
// These schemas provide runtime validation for AdCP data structures
// Generated using ts-to-zod from TypeScript type definitions

// Generated by ts-to-zod
import { z } from "zod";

export const MediaBuyStatusSchema = z.union([z.literal("pending_activation"), z.literal("active"), z.literal("paused"), z.literal("completed")]);

export const PacingSchema = z.union([z.literal("even"), z.literal("asap"), z.literal("front_loaded")]);

export const PackageStatusSchema = z.union([z.literal("draft"), z.literal("active"), z.literal("paused"), z.literal("completed")]);

export const CreativeAssignmentSchema = z.object({
    creative_id: z.string(),
    weight: z.number().optional(),
    placement_ids: z.tuple([z.string()]).rest(z.string()).optional()
});

export const FormatIDSchema = z.object({
    agent_url: z.string(),
    id: z.string()
});

export const FrequencyCapSchema = z.object({
    suppress_minutes: z.number()
});

export const VASTAsset1Schema = z.object({
    url: z.string().optional(),
    content: z.string().optional(),
    vast_version: z.union([z.literal("2.0"), z.literal("3.0"), z.literal("4.0"), z.literal("4.1"), z.literal("4.2")]).optional(),
    vpaid_enabled: z.boolean().optional(),
    duration_ms: z.number().optional(),
    tracking_events: z.array(z.union([z.literal("start"), z.literal("firstQuartile"), z.literal("midpoint"), z.literal("thirdQuartile"), z.literal("complete"), z.literal("impression"), z.literal("click"), z.literal("pause"), z.literal("resume"), z.literal("skip"), z.literal("mute"), z.literal("unmute"), z.literal("fullscreen"), z.literal("exitFullscreen"), z.literal("playerExpand"), z.literal("playerCollapse")])).optional()
});

export const VASTAsset2Schema = z.record(z.string(), z.unknown());

export const DAASTAsset1Schema = z.object({
    url: z.string().optional(),
    content: z.string().optional(),
    daast_version: z.union([z.literal("1.0"), z.literal("1.1")]).optional(),
    duration_ms: z.number().optional(),
    tracking_events: z.array(z.union([z.literal("start"), z.literal("firstQuartile"), z.literal("midpoint"), z.literal("thirdQuartile"), z.literal("complete"), z.literal("impression"), z.literal("pause"), z.literal("resume"), z.literal("skip"), z.literal("mute"), z.literal("unmute")])).optional(),
    companion_ads: z.boolean().optional()
});

export const DAASTAsset2Schema = z.record(z.string(), z.unknown());

export const BrandManifest1Schema = z.record(z.string(), z.unknown());

export const BrandManifest2Schema = z.object({
    url: z.string().optional(),
    name: z.string().optional(),
    logos: z.array(z.object({
        url: z.string(),
        tags: z.array(z.string()).optional(),
        width: z.number().optional(),
        height: z.number().optional()
    })).optional(),
    colors: z.object({
        primary: z.string().optional(),
        secondary: z.string().optional(),
        accent: z.string().optional(),
        background: z.string().optional(),
        text: z.string().optional()
    }).optional(),
    fonts: z.object({
        primary: z.string().optional(),
        secondary: z.string().optional(),
        font_urls: z.array(z.string()).optional()
    }).optional(),
    tone: z.string().optional(),
    tagline: z.string().optional(),
    assets: z.array(z.object({
        asset_id: z.string(),
        asset_type: z.union([z.literal("image"), z.literal("video"), z.literal("audio"), z.literal("text")]),
        url: z.string(),
        tags: z.array(z.string()).optional(),
        name: z.string().optional(),
        description: z.string().optional(),
        width: z.number().optional(),
        height: z.number().optional(),
        duration_seconds: z.number().optional(),
        file_size_bytes: z.number().optional(),
        format: z.string().optional(),
        metadata: z.record(z.string(), z.unknown()).optional()
    })).optional(),
    product_catalog: z.object({
        feed_url: z.string(),
        feed_format: z.union([z.literal("google_merchant_center"), z.literal("facebook_catalog"), z.literal("custom")]).optional(),
        categories: z.array(z.string()).optional(),
        last_updated: z.string().optional(),
        update_frequency: z.union([z.literal("realtime"), z.literal("hourly"), z.literal("daily"), z.literal("weekly")]).optional()
    }).optional(),
    disclaimers: z.array(z.object({
        text: z.string(),
        context: z.string().optional(),
        required: z.boolean().optional()
    })).optional(),
    industry: z.string().optional(),
    target_audience: z.string().optional(),
    contact: z.object({
        email: z.string().optional(),
        phone: z.string().optional()
    }).optional(),
    metadata: z.object({
        created_date: z.string().optional(),
        updated_date: z.string().optional(),
        version: z.string().optional()
    }).optional()
});

export const ImageAssetSchema = z.object({
    url: z.string(),
    width: z.number().optional(),
    height: z.number().optional(),
    format: z.string().optional(),
    alt_text: z.string().optional()
});

export const VideoAssetSchema = z.object({
    url: z.string(),
    width: z.number().optional(),
    height: z.number().optional(),
    duration_ms: z.number().optional(),
    format: z.string().optional(),
    bitrate_kbps: z.number().optional()
});

export const AudioAssetSchema = z.object({
    url: z.string(),
    duration_ms: z.number().optional(),
    format: z.string().optional(),
    bitrate_kbps: z.number().optional()
});

export const TextAssetSchema = z.object({
    content: z.string(),
    language: z.string().optional()
});

export const HTMLAssetSchema = z.object({
    content: z.string(),
    version: z.string().optional()
});

export const CSSAssetSchema = z.object({
    content: z.string(),
    media: z.string().optional()
});

export const JavaScriptAssetSchema = z.object({
    content: z.string(),
    module_type: z.union([z.literal("esm"), z.literal("commonjs"), z.literal("script")]).optional()
});

export const VASTAssetSchema = VASTAsset1Schema.and(VASTAsset2Schema);

export const DAASTAssetSchema = DAASTAsset1Schema.and(DAASTAsset2Schema);

export const URLAssetSchema = z.object({
    url: z.string(),
    url_type: z.union([z.literal("clickthrough"), z.literal("tracker_pixel"), z.literal("tracker_script")]).optional(),
    description: z.string().optional()
});

export const PromotedProductsSchema = z.object({
    manifest_skus: z.array(z.string()).optional(),
    manifest_tags: z.array(z.string()).optional(),
    manifest_category: z.string().optional(),
    manifest_query: z.string().optional()
});

export const DeliveryTypeSchema = z.union([z.literal("guaranteed"), z.literal("non_guaranteed")]);

export const CPMFixedRatePricingOptionSchema = z.object({
    pricing_option_id: z.string(),
    pricing_model: z.literal("cpm"),
    rate: z.number(),
    currency: z.string(),
    min_spend_per_package: z.number().optional()
});

export const CPMAuctionPricingOptionSchema = z.object({
    pricing_option_id: z.string(),
    pricing_model: z.literal("cpm"),
    currency: z.string(),
    price_guidance: z.object({
        floor: z.number(),
        p25: z.number().optional(),
        p50: z.number().optional(),
        p75: z.number().optional(),
        p90: z.number().optional()
    }),
    min_spend_per_package: z.number().optional()
});

export const VCPMFixedRatePricingOptionSchema = z.object({
    pricing_option_id: z.string(),
    pricing_model: z.literal("vcpm"),
    rate: z.number(),
    currency: z.string(),
    min_spend_per_package: z.number().optional()
});

export const VCPMAuctionPricingOptionSchema = z.object({
    pricing_option_id: z.string(),
    pricing_model: z.literal("vcpm"),
    currency: z.string(),
    price_guidance: z.object({
        floor: z.number(),
        p25: z.number().optional(),
        p50: z.number().optional(),
        p75: z.number().optional(),
        p90: z.number().optional()
    }),
    min_spend_per_package: z.number().optional()
});

export const CPCPricingOptionSchema = z.object({
    pricing_option_id: z.string(),
    pricing_model: z.literal("cpc"),
    rate: z.number(),
    currency: z.string(),
    min_spend_per_package: z.number().optional()
});

export const CPCVPricingOptionSchema = z.object({
    pricing_option_id: z.string(),
    pricing_model: z.literal("cpcv"),
    rate: z.number(),
    currency: z.string(),
    min_spend_per_package: z.number().optional()
});

export const CPVPricingOptionSchema = z.object({
    pricing_option_id: z.string(),
    pricing_model: z.literal("cpv"),
    rate: z.number(),
    currency: z.string(),
    parameters: z.object({
        view_threshold: z.union([z.number(), z.object({
                duration_seconds: z.number()
            })])
    }),
    min_spend_per_package: z.number().optional()
});

export const CPPPricingOptionSchema = z.object({
    pricing_option_id: z.string(),
    pricing_model: z.literal("cpp"),
    rate: z.number(),
    currency: z.string(),
    parameters: z.object({
        demographic: z.string(),
        min_points: z.number().optional()
    }),
    min_spend_per_package: z.number().optional()
});

export const FlatRatePricingOptionSchema = z.object({
    pricing_option_id: z.string(),
    pricing_model: z.literal("flat_rate"),
    rate: z.number(),
    currency: z.string(),
    is_fixed: z.literal(true),
    parameters: z.object({
        duration_hours: z.number().optional(),
        sov_percentage: z.number().optional(),
        loop_duration_seconds: z.number().optional(),
        min_plays_per_hour: z.number().optional(),
        venue_package: z.string().optional(),
        estimated_impressions: z.number().optional(),
        daypart: z.string().optional()
    }).optional(),
    min_spend_per_package: z.number().optional()
});

export const PlacementSchema = z.object({
    placement_id: z.string(),
    name: z.string(),
    description: z.string().optional(),
    format_ids: z.tuple([FormatIDSchema]).rest(FormatIDSchema).optional()
});

export const PricingOptionSchema = z.union([CPMFixedRatePricingOptionSchema, CPMAuctionPricingOptionSchema, VCPMFixedRatePricingOptionSchema, VCPMAuctionPricingOptionSchema, CPCPricingOptionSchema, CPCVPricingOptionSchema, CPVPricingOptionSchema, CPPPricingOptionSchema, FlatRatePricingOptionSchema]);

export const MeasurementSchema = z.object({
    type: z.string(),
    attribution: z.string(),
    window: z.string().optional(),
    reporting: z.string()
});

export const ReportingCapabilitiesSchema = z.object({
    available_reporting_frequencies: z.tuple([z.union([z.literal("hourly"), z.literal("daily"), z.literal("monthly")])]).rest(z.union([z.literal("hourly"), z.literal("daily"), z.literal("monthly")])),
    expected_delay_minutes: z.number(),
    timezone: z.string(),
    supports_webhooks: z.boolean(),
    available_metrics: z.array(z.union([z.literal("impressions"), z.literal("spend"), z.literal("clicks"), z.literal("ctr"), z.literal("video_completions"), z.literal("completion_rate"), z.literal("conversions"), z.literal("viewability"), z.literal("engagement_rate")]))
});

export const CreativePolicySchema = z.object({
    co_branding: z.union([z.literal("required"), z.literal("optional"), z.literal("none")]),
    landing_page: z.union([z.literal("any"), z.literal("retailer_site_only"), z.literal("must_include_retailer")]),
    templates_available: z.boolean()
});

export const TargetingOverlaySchema = z.object({
    geo_country_any_of: z.array(z.string()).optional(),
    geo_region_any_of: z.array(z.string()).optional(),
    geo_metro_any_of: z.array(z.string()).optional(),
    geo_postal_code_any_of: z.array(z.string()).optional(),
    frequency_cap: FrequencyCapSchema.optional()
});

export const PackageSchema = z.object({
    package_id: z.string(),
    buyer_ref: z.string().optional(),
    product_id: z.string().optional(),
    budget: z.number().optional(),
    pacing: PacingSchema.optional(),
    pricing_option_id: z.string().optional(),
    bid_price: z.number().optional(),
    impressions: z.number().optional(),
    targeting_overlay: TargetingOverlaySchema.optional(),
    creative_assignments: z.array(CreativeAssignmentSchema).optional(),
    format_ids_to_provide: z.array(FormatIDSchema).optional(),
    status: PackageStatusSchema
});

export const BrandManifestSchema = BrandManifest1Schema.and(BrandManifest2Schema);

export const BrandManifestReferenceSchema = z.union([BrandManifestSchema, z.string()]);

export const ProductSchema = z.object({
    product_id: z.string(),
    name: z.string(),
    description: z.string(),
    publisher_properties: z.tuple([z.object({
            publisher_domain: z.string(),
            property_ids: z.tuple([z.string()]).rest(z.string()).optional(),
            property_tags: z.tuple([z.string()]).rest(z.string()).optional()
        })]).rest(z.object({
        publisher_domain: z.string(),
        property_ids: z.tuple([z.string()]).rest(z.string()).optional(),
        property_tags: z.tuple([z.string()]).rest(z.string()).optional()
    })),
    format_ids: z.array(FormatIDSchema),
    placements: z.tuple([PlacementSchema]).rest(PlacementSchema).optional(),
    delivery_type: DeliveryTypeSchema,
    pricing_options: z.tuple([PricingOptionSchema]).rest(PricingOptionSchema),
    estimated_exposures: z.number().optional(),
    measurement: MeasurementSchema.optional(),
    delivery_measurement: z.object({
        provider: z.string(),
        notes: z.string().optional()
    }),
    reporting_capabilities: ReportingCapabilitiesSchema.optional(),
    creative_policy: CreativePolicySchema.optional(),
    is_custom: z.boolean().optional(),
    brief_relevance: z.string().optional(),
    expires_at: z.string().optional()
});

export const MediaBuySchema = z.object({
    media_buy_id: z.string(),
    buyer_ref: z.string().optional(),
    status: MediaBuyStatusSchema,
    promoted_offering: z.string(),
    total_budget: z.number(),
    packages: z.array(PackageSchema),
    creative_deadline: z.string().optional(),
    created_at: z.string().optional(),
    updated_at: z.string().optional()
});

export const PromotedOfferingsSchema = z.object({
    brand_manifest: BrandManifestReferenceSchema,
    product_selectors: PromotedProductsSchema.optional(),
    offerings: z.array(z.object({
        name: z.string(),
        description: z.string().optional(),
        assets: z.array(z.record(z.string(), z.unknown())).optional()
    })).optional(),
    asset_selectors: z.object({
        tags: z.array(z.string()).optional(),
        asset_types: z.array(z.union([z.literal("image"), z.literal("video"), z.literal("audio"), z.literal("vast"), z.literal("daast"), z.literal("text"), z.literal("url"), z.literal("html"), z.literal("css"), z.literal("javascript"), z.literal("webhook")])).optional(),
        exclude_tags: z.array(z.string()).optional()
    }).optional()
});

export const CreativeAssetSchema = z.object({
    creative_id: z.string(),
    name: z.string(),
    format_id: FormatIDSchema,
    assets: z.record(z.string(), z.union([ImageAssetSchema, VideoAssetSchema, AudioAssetSchema, TextAssetSchema, HTMLAssetSchema, CSSAssetSchema, JavaScriptAssetSchema, VASTAssetSchema, DAASTAssetSchema, PromotedOfferingsSchema, URLAssetSchema])),
    inputs: z.array(z.object({
        name: z.string(),
        macros: z.record(z.string(), z.string()).optional(),
        context_description: z.string().optional()
    })).optional(),
    tags: z.array(z.string()).optional(),
    approved: z.boolean().optional()
});

// ====== TOOL SCHEMAS ======
// Generated by ts-to-zod
export const ErrorSchema = z.object({
    code: z.string(),
    message: z.string(),
    field: z.string().optional(),
    suggestion: z.string().optional(),
    retry_after: z.number().optional(),
    details: z.record(z.string(), z.unknown()).optional()
});

export const ListCreativeFormatsRequestSchema = z.object({
    format_ids: z.array(FormatIDSchema).optional(),
    type: z.union([z.literal("audio"), z.literal("video"), z.literal("display"), z.literal("dooh")]).optional(),
    asset_types: z.array(z.union([z.literal("image"), z.literal("video"), z.literal("audio"), z.literal("text"), z.literal("html"), z.literal("javascript"), z.literal("url")])).optional(),
    max_width: z.number().optional(),
    max_height: z.number().optional(),
    min_width: z.number().optional(),
    min_height: z.number().optional(),
    is_responsive: z.boolean().optional(),
    name_search: z.string().optional()
});

export const StartTimingSchema = z.union([z.literal("asap"), z.string()]);

export const PushNotificationConfigSchema = z.object({
    url: z.string(),
    token: z.string().optional(),
    authentication: z.object({
        schemes: z.tuple([z.union([z.literal("Bearer"), z.literal("HMAC-SHA256")])]),
        credentials: z.string()
    })
});

export const CreateMediaBuyResponseSchema = z.object({
    media_buy_id: z.string().optional(),
    buyer_ref: z.string(),
    creative_deadline: z.string().optional(),
    packages: z.array(z.object({
        package_id: z.string(),
        buyer_ref: z.string()
    })).optional(),
    errors: z.array(ErrorSchema).optional()
});

export const SyncCreativesResponseSchema = z.object({
    dry_run: z.boolean().optional(),
    creatives: z.array(z.object({
        creative_id: z.string(),
        action: z.union([z.literal("created"), z.literal("updated"), z.literal("unchanged"), z.literal("failed"), z.literal("deleted")]),
        platform_id: z.string().optional(),
        changes: z.array(z.string()).optional(),
        errors: z.array(z.string()).optional(),
        warnings: z.array(z.string()).optional(),
        preview_url: z.string().optional(),
        expires_at: z.string().optional(),
        assigned_to: z.array(z.string()).optional(),
        assignment_errors: z.record(z.string(), z.string()).optional()
    }))
});

export const CreativeStatusSchema = z.union([z.literal("processing"), z.literal("approved"), z.literal("rejected"), z.literal("pending_review")]);

export const CreativeStatus1Schema = z.union([z.literal("processing"), z.literal("approved"), z.literal("rejected"), z.literal("pending_review")]);

export const UpdateMediaBuyRequest1Schema = z.object({
    media_buy_id: z.string().optional(),
    buyer_ref: z.string().optional(),
    active: z.boolean().optional(),
    start_time: StartTimingSchema.optional(),
    end_time: z.string().optional(),
    budget: z.number().optional(),
    packages: z.array(z.union([z.record(z.string(), z.unknown()), z.record(z.string(), z.unknown())])).optional(),
    push_notification_config: PushNotificationConfigSchema.optional()
});

export const UpdateMediaBuyRequest2Schema = z.record(z.string(), z.unknown());

export const UpdateMediaBuyResponseSchema = z.object({
    media_buy_id: z.string(),
    buyer_ref: z.string(),
    implementation_date: z.string().optional().nullable(),
    affected_packages: z.array(z.object({
        package_id: z.string(),
        buyer_ref: z.string()
    })).optional(),
    errors: z.array(ErrorSchema).optional()
});

export const GetMediaBuyDeliveryRequestSchema = z.object({
    media_buy_ids: z.array(z.string()).optional(),
    buyer_refs: z.array(z.string()).optional(),
    status_filter: z.union([z.union([z.literal("active"), z.literal("pending"), z.literal("paused"), z.literal("completed"), z.literal("failed"), z.literal("all")]), z.array(z.union([z.literal("active"), z.literal("pending"), z.literal("paused"), z.literal("completed"), z.literal("failed")]))]).optional(),
    start_date: z.string().optional(),
    end_date: z.string().optional()
});

export const PricingModelSchema = z.union([z.literal("cpm"), z.literal("vcpm"), z.literal("cpc"), z.literal("cpcv"), z.literal("cpv"), z.literal("cpp"), z.literal("flat_rate")]);

export const DeliveryMetricsSchema = z.record(z.string(), z.unknown()).and(z.object({
    impressions: z.number().optional(),
    spend: z.number().optional(),
    clicks: z.number().optional(),
    ctr: z.number().optional(),
    views: z.number().optional(),
    completed_views: z.number().optional(),
    completion_rate: z.number().optional(),
    conversions: z.number().optional(),
    leads: z.number().optional(),
    grps: z.number().optional(),
    reach: z.number().optional(),
    frequency: z.number().optional(),
    quartile_data: z.object({
        q1_views: z.number().optional(),
        q2_views: z.number().optional(),
        q3_views: z.number().optional(),
        q4_views: z.number().optional()
    }).optional(),
    dooh_metrics: z.object({
        loop_plays: z.number().optional(),
        screens_used: z.number().optional(),
        screen_time_seconds: z.number().optional(),
        sov_achieved: z.number().optional(),
        calculation_notes: z.string().optional(),
        venue_breakdown: z.array(z.object({
            venue_id: z.string(),
            venue_name: z.string().optional(),
            venue_type: z.string().optional(),
            impressions: z.number(),
            loop_plays: z.number().optional(),
            screens_used: z.number().optional()
        })).optional()
    }).optional()
}));

export const ListAuthorizedPropertiesRequestSchema = z.object({
    publisher_domains: z.tuple([z.string()]).rest(z.string()).optional()
});

export const AdvertisingChannelsSchema = z.union([z.literal("display"), z.literal("video"), z.literal("audio"), z.literal("native"), z.literal("dooh"), z.literal("ctv"), z.literal("podcast"), z.literal("retail"), z.literal("social")]);

export const ProvidePerformanceFeedbackRequestSchema = z.object({
    media_buy_id: z.string(),
    measurement_period: z.object({
        start: z.string(),
        end: z.string()
    }),
    performance_index: z.number(),
    package_id: z.string().optional(),
    creative_id: z.string().optional(),
    metric_type: z.union([z.literal("overall_performance"), z.literal("conversion_rate"), z.literal("brand_lift"), z.literal("click_through_rate"), z.literal("completion_rate"), z.literal("viewability"), z.literal("brand_safety"), z.literal("cost_efficiency")]).optional(),
    feedback_source: z.union([z.literal("buyer_attribution"), z.literal("third_party_measurement"), z.literal("platform_analytics"), z.literal("verification_partner")]).optional()
});

export const ProvidePerformanceFeedbackResponseSchema = z.object({
    success: z.boolean(),
    errors: z.array(ErrorSchema).optional()
});

export const FormatID1Schema = z.object({
    agent_url: z.string(),
    id: z.string()
});

export const PreviewCreativeResponseSchema = z.object({
    previews: z.tuple([z.object({
            preview_id: z.string(),
            renders: z.tuple([z.object({
                    render_id: z.string(),
                    preview_url: z.string(),
                    role: z.string(),
                    dimensions: z.object({
                        width: z.number(),
                        height: z.number()
                    }).optional(),
                    embedding: z.object({
                        recommended_sandbox: z.string().optional(),
                        requires_https: z.boolean().optional(),
                        supports_fullscreen: z.boolean().optional(),
                        csp_policy: z.string().optional()
                    }).optional()
                })]).rest(z.object({
                render_id: z.string(),
                preview_url: z.string(),
                role: z.string(),
                dimensions: z.object({
                    width: z.number(),
                    height: z.number()
                }).optional(),
                embedding: z.object({
                    recommended_sandbox: z.string().optional(),
                    requires_https: z.boolean().optional(),
                    supports_fullscreen: z.boolean().optional(),
                    csp_policy: z.string().optional()
                }).optional()
            })),
            input: z.object({
                name: z.string(),
                macros: z.record(z.string(), z.string()).optional(),
                context_description: z.string().optional()
            })
        })]).rest(z.object({
        preview_id: z.string(),
        renders: z.tuple([z.object({
                render_id: z.string(),
                preview_url: z.string(),
                role: z.string(),
                dimensions: z.object({
                    width: z.number(),
                    height: z.number()
                }).optional(),
                embedding: z.object({
                    recommended_sandbox: z.string().optional(),
                    requires_https: z.boolean().optional(),
                    supports_fullscreen: z.boolean().optional(),
                    csp_policy: z.string().optional()
                }).optional()
            })]).rest(z.object({
            render_id: z.string(),
            preview_url: z.string(),
            role: z.string(),
            dimensions: z.object({
                width: z.number(),
                height: z.number()
            }).optional(),
            embedding: z.object({
                recommended_sandbox: z.string().optional(),
                requires_https: z.boolean().optional(),
                supports_fullscreen: z.boolean().optional(),
                csp_policy: z.string().optional()
            }).optional()
        })),
        input: z.object({
            name: z.string(),
            macros: z.record(z.string(), z.string()).optional(),
            context_description: z.string().optional()
        })
    })),
    interactive_url: z.string().optional(),
    expires_at: z.string()
});

export const GetSignalsRequestSchema = z.object({
    signal_spec: z.string(),
    deliver_to: z.object({
        platforms: z.union([z.literal("all"), z.array(z.string())]),
        accounts: z.array(z.object({
            platform: z.string(),
            account: z.string()
        })).optional(),
        countries: z.array(z.string())
    }),
    filters: z.object({
        catalog_types: z.array(z.union([z.literal("marketplace"), z.literal("custom"), z.literal("owned")])).optional(),
        data_providers: z.array(z.string()).optional(),
        max_cpm: z.number().optional(),
        min_coverage_percentage: z.number().optional()
    }).optional(),
    max_results: z.number().optional()
});

export const GetSignalsResponseSchema = z.object({
    signals: z.array(z.object({
        signal_agent_segment_id: z.string(),
        name: z.string(),
        description: z.string(),
        signal_type: z.union([z.literal("marketplace"), z.literal("custom"), z.literal("owned")]),
        data_provider: z.string(),
        coverage_percentage: z.number(),
        deployments: z.array(z.object({
            platform: z.string(),
            account: z.string().optional().nullable(),
            is_live: z.boolean(),
            scope: z.union([z.literal("platform-wide"), z.literal("account-specific")]),
            decisioning_platform_segment_id: z.string().optional(),
            estimated_activation_duration_minutes: z.number().optional()
        })),
        pricing: z.object({
            cpm: z.number(),
            currency: z.string()
        })
    })),
    errors: z.array(ErrorSchema).optional()
});

export const ActivateSignalRequestSchema = z.object({
    signal_agent_segment_id: z.string(),
    platform: z.string(),
    account: z.string().optional()
});

export const ActivateSignalResponseSchema = z.object({
    decisioning_platform_segment_id: z.string().optional(),
    estimated_activation_duration_minutes: z.number().optional(),
    deployed_at: z.string().optional(),
    errors: z.array(ErrorSchema).optional()
});

export const FormatSchema = z.object({
    format_id: FormatIDSchema,
    name: z.string(),
    description: z.string().optional(),
    preview_image: z.string().optional(),
    example_url: z.string().optional(),
    type: z.union([z.literal("audio"), z.literal("video"), z.literal("display"), z.literal("native"), z.literal("dooh"), z.literal("rich_media"), z.literal("universal")]),
    renders: z.tuple([z.object({
            role: z.string(),
            dimensions: z.object({
                width: z.number().optional(),
                height: z.number().optional(),
                min_width: z.number().optional(),
                min_height: z.number().optional(),
                max_width: z.number().optional(),
                max_height: z.number().optional(),
                responsive: z.object({
                    width: z.boolean(),
                    height: z.boolean()
                }).optional(),
                aspect_ratio: z.string().optional(),
                unit: z.union([z.literal("px"), z.literal("dp"), z.literal("inches"), z.literal("cm")])
            })
        })]).rest(z.object({
        role: z.string(),
        dimensions: z.object({
            width: z.number().optional(),
            height: z.number().optional(),
            min_width: z.number().optional(),
            min_height: z.number().optional(),
            max_width: z.number().optional(),
            max_height: z.number().optional(),
            responsive: z.object({
                width: z.boolean(),
                height: z.boolean()
            }).optional(),
            aspect_ratio: z.string().optional(),
            unit: z.union([z.literal("px"), z.literal("dp"), z.literal("inches"), z.literal("cm")])
        })
    })).optional(),
    assets_required: z.array(z.union([z.object({
            asset_id: z.string(),
            asset_type: z.union([z.literal("image"), z.literal("video"), z.literal("audio"), z.literal("vast"), z.literal("daast"), z.literal("text"), z.literal("html"), z.literal("css"), z.literal("javascript"), z.literal("url"), z.literal("webhook"), z.literal("promoted_offerings")]),
            asset_role: z.string().optional(),
            required: z.boolean().optional(),
            requirements: z.record(z.string(), z.unknown()).optional()
        }), z.object({
            asset_group_id: z.string(),
            repeatable: z.literal(true),
            min_count: z.number(),
            max_count: z.number(),
            assets: z.array(z.object({
                asset_id: z.string(),
                asset_type: z.union([z.literal("image"), z.literal("video"), z.literal("audio"), z.literal("vast"), z.literal("daast"), z.literal("text"), z.literal("html"), z.literal("css"), z.literal("javascript"), z.literal("url"), z.literal("webhook"), z.literal("promoted_offerings")]),
                asset_role: z.string().optional(),
                required: z.boolean().optional(),
                requirements: z.record(z.string(), z.unknown()).optional()
            }))
        })])).optional(),
    delivery: z.record(z.string(), z.unknown()).optional(),
    supported_macros: z.array(z.string()).optional(),
    output_format_ids: z.array(FormatID1Schema).optional()
});

export const ListCreativesRequestSchema = z.object({
    filters: z.object({
        format: z.string().optional(),
        formats: z.array(z.string()).optional(),
        status: CreativeStatusSchema.optional(),
        statuses: z.array(CreativeStatus1Schema).optional(),
        tags: z.array(z.string()).optional(),
        tags_any: z.array(z.string()).optional(),
        name_contains: z.string().optional(),
        creative_ids: z.array(z.string()).optional(),
        created_after: z.string().optional(),
        created_before: z.string().optional(),
        updated_after: z.string().optional(),
        updated_before: z.string().optional(),
        assigned_to_package: z.string().optional(),
        assigned_to_packages: z.array(z.string()).optional(),
        unassigned: z.boolean().optional(),
        has_performance_data: z.boolean().optional()
    }).optional(),
    sort: z.object({
        field: z.union([z.literal("created_date"), z.literal("updated_date"), z.literal("name"), z.literal("status"), z.literal("assignment_count"), z.literal("performance_score")]).optional(),
        direction: z.union([z.literal("asc"), z.literal("desc")]).optional()
    }).optional(),
    pagination: z.object({
        limit: z.number().optional(),
        offset: z.number().optional()
    }).optional(),
    include_assignments: z.boolean().optional(),
    include_performance: z.boolean().optional(),
    include_sub_assets: z.boolean().optional(),
    fields: z.array(z.union([z.literal("creative_id"), z.literal("name"), z.literal("format"), z.literal("status"), z.literal("created_date"), z.literal("updated_date"), z.literal("tags"), z.literal("assignments"), z.literal("performance"), z.literal("sub_assets")])).optional()
});

export const UpdateMediaBuyRequestSchema = UpdateMediaBuyRequest1Schema.and(UpdateMediaBuyRequest2Schema);

export const GetMediaBuyDeliveryResponseSchema = z.object({
    notification_type: z.union([z.literal("scheduled"), z.literal("final"), z.literal("delayed"), z.literal("adjusted")]).optional(),
    partial_data: z.boolean().optional(),
    unavailable_count: z.number().optional(),
    sequence_number: z.number().optional(),
    next_expected_at: z.string().optional(),
    reporting_period: z.object({
        start: z.string(),
        end: z.string()
    }),
    currency: z.string(),
    aggregated_totals: z.object({
        impressions: z.number(),
        spend: z.number(),
        clicks: z.number().optional(),
        video_completions: z.number().optional(),
        media_buy_count: z.number()
    }).optional(),
    media_buy_deliveries: z.array(z.object({
        media_buy_id: z.string(),
        buyer_ref: z.string().optional(),
        status: z.union([z.literal("pending"), z.literal("active"), z.literal("paused"), z.literal("completed"), z.literal("failed"), z.literal("reporting_delayed")]),
        expected_availability: z.string().optional(),
        is_adjusted: z.boolean().optional(),
        pricing_model: PricingModelSchema.optional(),
        totals: DeliveryMetricsSchema.and(z.object({
            effective_rate: z.number().optional()
        })),
        by_package: z.array(DeliveryMetricsSchema.and(z.object({
            package_id: z.string(),
            buyer_ref: z.string().optional(),
            pacing_index: z.number().optional()
        }))),
        daily_breakdown: z.array(z.object({
            date: z.string(),
            impressions: z.number(),
            spend: z.number()
        })).optional()
    })),
    errors: z.array(ErrorSchema).optional()
});

export const ListAuthorizedPropertiesResponseSchema = z.object({
    publisher_domains: z.tuple([z.string()]).rest(z.string()),
    primary_channels: z.tuple([AdvertisingChannelsSchema]).rest(AdvertisingChannelsSchema).optional(),
    primary_countries: z.tuple([z.string()]).rest(z.string()).optional(),
    portfolio_description: z.string().optional(),
    advertising_policies: z.string().optional(),
    last_updated: z.string().optional(),
    errors: z.array(ErrorSchema).optional()
});

export const ListCreativeFormatsResponseSchema = z.object({
    formats: z.array(FormatSchema),
    creative_agents: z.array(z.object({
        agent_url: z.string(),
        agent_name: z.string().optional(),
        capabilities: z.array(z.union([z.literal("validation"), z.literal("assembly"), z.literal("generation"), z.literal("preview")])).optional()
    })).optional(),
    errors: z.array(ErrorSchema).optional()
});

export const GetProductsResponseSchema = z.object({
    products: z.array(ProductSchema),
    errors: z.array(ErrorSchema).optional()
});

export const ListCreativesResponseSchema = z.object({
    creatives: z.array(CreativeAssetSchema),
    errors: z.array(ErrorSchema).optional()
});
