name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    - name: Sync schemas from AdCP
      run: npm run sync-schemas

    - name: Validate generated files are in sync
      run: |
        # Regenerate types from schemas
        npm run generate-types

        # Check if any generated files changed
        if ! git diff --exit-code src/lib/types/*.generated.ts src/lib/agents/index.generated.ts 2>/dev/null; then
          echo ""
          echo "‚ùå Generated TypeScript files are out of sync with AdCP schemas!"
          echo ""
          echo "üìã Changes detected in:"
          git diff --name-only src/lib/types/*.generated.ts src/lib/agents/index.generated.ts 2>/dev/null || true
          echo ""
          echo "üîß To fix, run locally:"
          echo "  npm run sync-schemas"
          echo "  npm run generate-types"
          echo ""
          echo "Then commit the updated generated files."
          exit 1
        fi

        echo "‚úÖ Generated files are in sync with schemas"
    - name: Run TypeScript type checking
      run: npm run typecheck

    - name: Build library
      run: npm run build:lib

    - name: Run unit tests
      run: npm test
      env:
        CI: true

    - name: Build full project
      run: npm run build

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check package.json integrity
      run: |
        # Verify no missing dependencies
        npm ls --depth=0
        
        # Verify build works from clean state
        npm run clean
        npm run build:lib
        
        # Verify package exports are valid
        node -e "
          const pkg = require('./package.json');
          const fs = require('fs');
          
          // Check main export exists
          if (!fs.existsSync(pkg.main)) {
            throw new Error('Main export file does not exist: ' + pkg.main);
          }
          
          // Check types export exists
          if (!fs.existsSync(pkg.types)) {
            throw new Error('Types export file does not exist: ' + pkg.types);
          }
          
          console.log('‚úÖ Package exports are valid');
        "

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: |
        # Check if any critical or high vulnerabilities exist
        if npm audit --audit-level=high --json | grep -q '"level":"high"\|"level":"critical"'; then
          echo "‚ùå High or critical vulnerabilities found"
          npm audit --audit-level=high
          exit 1
        else
          echo "‚úÖ No high or critical vulnerabilities found"
        fi

  changeset-check:
    name: Changeset Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for changeset
      run: |
        # Check if any library code was modified (src/lib/, package.json)
        LIBRARY_FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^(src/lib/|package\.json|scripts/(sync-schemas|generate-types)\.ts)' || true)

        if [ -n "$LIBRARY_FILES_CHANGED" ]; then
          echo "üìù Library files were modified:"
          echo "$LIBRARY_FILES_CHANGED"

          # Check if there are any changesets (excluding README.md)
          CHANGESET_FILES=$(find .changeset -name '*.md' ! -name 'README.md' 2>/dev/null || true)

          if [ -z "$CHANGESET_FILES" ]; then
            echo ""
            echo "‚ùå Library code was modified but no changeset was found!"
            echo ""
            echo "Please run: npm run changeset"
            echo ""
            echo "This will create a changeset file describing your changes."
            echo "Changesets are required for all library changes to ensure proper versioning."
            exit 1
          else
            echo ""
            echo "‚úÖ Changeset found:"
            ls -la .changeset/*.md | grep -v README.md
          fi
        else
          echo "‚ÑπÔ∏è No library files modified, changeset not required"
        fi

  publish-dry-run:
    name: Publish Dry Run
    runs-on: ubuntu-latest
    needs: [test, quality, security, changeset-check]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Test publish (dry run)
      run: |
        # Simulate the full publish process
        npm run prepublishOnly
        npm pack --dry-run

        echo "‚úÖ Package is ready for publication"
        echo "üì¶ Package contents:"
        npm pack --silent | tar -tzf - | head -20

